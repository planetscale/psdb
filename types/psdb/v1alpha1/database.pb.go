// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: psdb/v1alpha1/database.proto

package psdbv1alpha1

import (
	v1 "github.com/planetscale/psdb/types/psdb/data/v1"
	v16 "github.com/planetscale/vitess-types/gen/vitess/query/v16"
	v162 "github.com/planetscale/vitess-types/gen/vitess/vtgate/v16"
	v161 "github.com/planetscale/vitess-types/gen/vitess/vtrpc/v16"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Psid     string  `protobuf:"bytes,2,opt,name=psid,proto3" json:"psid,omitempty"`
	Role     v1.Role `protobuf:"varint,3,opt,name=role,proto3,enum=psdb.data.v1.Role" json:"role,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPsid() string {
	if x != nil {
		return x.Psid
	}
	return ""
}

func (x *User) GetRole() v1.Role {
	if x != nil {
		return x.Role
	}
	return v1.Role(0)
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{1}
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch  string   `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Session *Session `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionResponse) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateSessionResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session       *Session                     `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Query         string                       `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	BindVariables map[string]*v16.BindVariable `protobuf:"bytes,3,rep,name=bind_variables,json=bindVariables,proto3" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecuteRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExecuteRequest) GetBindVariables() map[string]*v16.BindVariable {
	if x != nil {
		return x.BindVariables
	}
	return nil
}

type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session         `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Result  *v16.QueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Error   *v161.RPCError   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// optional timing, in seconds, for the response, if empty or 0, this wasn't set
	// does not exist in the response from a StreamExecute.
	Timing float64 `protobuf:"fixed64,4,opt,name=timing,proto3" json:"timing,omitempty"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExecuteResponse) GetResult() *v16.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ExecuteResponse) GetError() *v161.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExecuteResponse) GetTiming() float64 {
	if x != nil {
		return x.Timing
	}
	return 0
}

type PrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session       *Session                     `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Query         string                       `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	BindVariables map[string]*v16.BindVariable `protobuf:"bytes,3,rep,name=bind_variables,json=bindVariables,proto3" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{5}
}

func (x *PrepareRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *PrepareRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *PrepareRequest) GetBindVariables() map[string]*v16.BindVariable {
	if x != nil {
		return x.BindVariables
	}
	return nil
}

type PrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session       `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Fields  []*v16.Field   `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Error   *v161.RPCError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *PrepareResponse) GetFields() []*v16.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PrepareResponse) GetError() *v161.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

type BinlogDumpGTIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogFile string   `protobuf:"bytes,1,opt,name=logFile,proto3" json:"logFile,omitempty"`
	LogPos  uint64   `protobuf:"varint,2,opt,name=logPos,proto3" json:"logPos,omitempty"`
	GtidSet *GTIDSet `protobuf:"bytes,3,opt,name=gtidSet,proto3" json:"gtidSet,omitempty"`
}

func (x *BinlogDumpGTIDRequest) Reset() {
	*x = BinlogDumpGTIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinlogDumpGTIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogDumpGTIDRequest) ProtoMessage() {}

func (x *BinlogDumpGTIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogDumpGTIDRequest.ProtoReflect.Descriptor instead.
func (*BinlogDumpGTIDRequest) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{7}
}

func (x *BinlogDumpGTIDRequest) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *BinlogDumpGTIDRequest) GetLogPos() uint64 {
	if x != nil {
		return x.LogPos
	}
	return 0
}

func (x *BinlogDumpGTIDRequest) GetGtidSet() *GTIDSet {
	if x != nil {
		return x.GtidSet
	}
	return nil
}

type BinlogDumpGTIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpaqueBlob []byte         `protobuf:"bytes,1,opt,name=opaque_blob,json=opaqueBlob,proto3" json:"opaque_blob,omitempty"`
	Error      *v161.RPCError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BinlogDumpGTIDResponse) Reset() {
	*x = BinlogDumpGTIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinlogDumpGTIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogDumpGTIDResponse) ProtoMessage() {}

func (x *BinlogDumpGTIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogDumpGTIDResponse.ProtoReflect.Descriptor instead.
func (*BinlogDumpGTIDResponse) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{8}
}

func (x *BinlogDumpGTIDResponse) GetOpaqueBlob() []byte {
	if x != nil {
		return x.OpaqueBlob
	}
	return nil
}

func (x *BinlogDumpGTIDResponse) GetError() *v161.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

type CloseSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CloseSessionRequest) Reset() {
	*x = CloseSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionRequest) ProtoMessage() {}

func (x *CloseSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionRequest.ProtoReflect.Descriptor instead.
func (*CloseSessionRequest) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{9}
}

func (x *CloseSessionRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type CloseSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session       `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Error   *v161.RPCError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CloseSessionResponse) Reset() {
	*x = CloseSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionResponse) ProtoMessage() {}

func (x *CloseSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionResponse.ProtoReflect.Descriptor instead.
func (*CloseSessionResponse) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{10}
}

func (x *CloseSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CloseSessionResponse) GetError() *v161.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature     []byte        `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	VitessSession *v162.Session `protobuf:"bytes,2,opt,name=vitess_session,json=vitessSession,proto3" json:"vitess_session,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{11}
}

func (x *Session) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Session) GetVitessSession() *v162.Session {
	if x != nil {
		return x.VitessSession
	}
	return nil
}

type GTIDSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavor string `protobuf:"bytes,1,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GTIDSet) Reset() {
	*x = GTIDSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psdb_v1alpha1_database_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GTIDSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GTIDSet) ProtoMessage() {}

func (x *GTIDSet) ProtoReflect() protoreflect.Message {
	mi := &file_psdb_v1alpha1_database_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GTIDSet.ProtoReflect.Descriptor instead.
func (*GTIDSet) Descriptor() ([]byte, []int) {
	return file_psdb_v1alpha1_database_proto_rawDescGZIP(), []int{12}
}

func (x *GTIDSet) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *GTIDSet) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_psdb_v1alpha1_database_proto protoreflect.FileDescriptor

var file_psdb_v1alpha1_database_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x73, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x17, 0x70,
	0x73, 0x64, 0x62, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x36, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x36, 0x2f, 0x76, 0x74, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x74, 0x72,
	0x70, 0x63, 0x2f, 0x76, 0x31, 0x36, 0x2f, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x73, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x73,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x57, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x73, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x69,
	0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x12, 0x42,
	0x69, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x36, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x36, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x36, 0x2e, 0x52, 0x50, 0x43,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x22, 0x93, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x57, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x36, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x36, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x36, 0x2e, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x15, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x6d,
	0x70, 0x47, 0x54, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x67, 0x74, 0x69, 0x64, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x54, 0x49, 0x44, 0x53, 0x65, 0x74, 0x52, 0x07, 0x67, 0x74, 0x69, 0x64, 0x53, 0x65, 0x74,
	0x22, 0x6b, 0x0a, 0x16, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x47, 0x54,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x36, 0x2e, 0x52, 0x50,
	0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x47, 0x0a,
	0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x36, 0x2e, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x36, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37,
	0x0a, 0x07, 0x47, 0x54, 0x49, 0x44, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x98, 0x04, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x73, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x44, 0x75,
	0x6d, 0x70, 0x47, 0x54, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x6d,
	0x70, 0x47, 0x54, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x47, 0x54, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x73, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x73,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2f, 0x70, 0x73, 0x64,
	0x62, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x73, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x70, 0x73, 0x64, 0x62, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_psdb_v1alpha1_database_proto_rawDescOnce sync.Once
	file_psdb_v1alpha1_database_proto_rawDescData = file_psdb_v1alpha1_database_proto_rawDesc
)

func file_psdb_v1alpha1_database_proto_rawDescGZIP() []byte {
	file_psdb_v1alpha1_database_proto_rawDescOnce.Do(func() {
		file_psdb_v1alpha1_database_proto_rawDescData = protoimpl.X.CompressGZIP(file_psdb_v1alpha1_database_proto_rawDescData)
	})
	return file_psdb_v1alpha1_database_proto_rawDescData
}

var file_psdb_v1alpha1_database_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_psdb_v1alpha1_database_proto_goTypes = []interface{}{
	(*User)(nil),                   // 0: psdb.v1alpha1.User
	(*CreateSessionRequest)(nil),   // 1: psdb.v1alpha1.CreateSessionRequest
	(*CreateSessionResponse)(nil),  // 2: psdb.v1alpha1.CreateSessionResponse
	(*ExecuteRequest)(nil),         // 3: psdb.v1alpha1.ExecuteRequest
	(*ExecuteResponse)(nil),        // 4: psdb.v1alpha1.ExecuteResponse
	(*PrepareRequest)(nil),         // 5: psdb.v1alpha1.PrepareRequest
	(*PrepareResponse)(nil),        // 6: psdb.v1alpha1.PrepareResponse
	(*BinlogDumpGTIDRequest)(nil),  // 7: psdb.v1alpha1.BinlogDumpGTIDRequest
	(*BinlogDumpGTIDResponse)(nil), // 8: psdb.v1alpha1.BinlogDumpGTIDResponse
	(*CloseSessionRequest)(nil),    // 9: psdb.v1alpha1.CloseSessionRequest
	(*CloseSessionResponse)(nil),   // 10: psdb.v1alpha1.CloseSessionResponse
	(*Session)(nil),                // 11: psdb.v1alpha1.Session
	(*GTIDSet)(nil),                // 12: psdb.v1alpha1.GTIDSet
	nil,                            // 13: psdb.v1alpha1.ExecuteRequest.BindVariablesEntry
	nil,                            // 14: psdb.v1alpha1.PrepareRequest.BindVariablesEntry
	(v1.Role)(0),                   // 15: psdb.data.v1.Role
	(*v16.QueryResult)(nil),        // 16: vitess.query.v16.QueryResult
	(*v161.RPCError)(nil),          // 17: vitess.vtrpc.v16.RPCError
	(*v16.Field)(nil),              // 18: vitess.query.v16.Field
	(*v162.Session)(nil),           // 19: vitess.vtgate.v16.Session
	(*v16.BindVariable)(nil),       // 20: vitess.query.v16.BindVariable
}
var file_psdb_v1alpha1_database_proto_depIdxs = []int32{
	15, // 0: psdb.v1alpha1.User.role:type_name -> psdb.data.v1.Role
	0,  // 1: psdb.v1alpha1.CreateSessionResponse.user:type_name -> psdb.v1alpha1.User
	11, // 2: psdb.v1alpha1.CreateSessionResponse.session:type_name -> psdb.v1alpha1.Session
	11, // 3: psdb.v1alpha1.ExecuteRequest.session:type_name -> psdb.v1alpha1.Session
	13, // 4: psdb.v1alpha1.ExecuteRequest.bind_variables:type_name -> psdb.v1alpha1.ExecuteRequest.BindVariablesEntry
	11, // 5: psdb.v1alpha1.ExecuteResponse.session:type_name -> psdb.v1alpha1.Session
	16, // 6: psdb.v1alpha1.ExecuteResponse.result:type_name -> vitess.query.v16.QueryResult
	17, // 7: psdb.v1alpha1.ExecuteResponse.error:type_name -> vitess.vtrpc.v16.RPCError
	11, // 8: psdb.v1alpha1.PrepareRequest.session:type_name -> psdb.v1alpha1.Session
	14, // 9: psdb.v1alpha1.PrepareRequest.bind_variables:type_name -> psdb.v1alpha1.PrepareRequest.BindVariablesEntry
	11, // 10: psdb.v1alpha1.PrepareResponse.session:type_name -> psdb.v1alpha1.Session
	18, // 11: psdb.v1alpha1.PrepareResponse.fields:type_name -> vitess.query.v16.Field
	17, // 12: psdb.v1alpha1.PrepareResponse.error:type_name -> vitess.vtrpc.v16.RPCError
	12, // 13: psdb.v1alpha1.BinlogDumpGTIDRequest.gtidSet:type_name -> psdb.v1alpha1.GTIDSet
	17, // 14: psdb.v1alpha1.BinlogDumpGTIDResponse.error:type_name -> vitess.vtrpc.v16.RPCError
	11, // 15: psdb.v1alpha1.CloseSessionRequest.session:type_name -> psdb.v1alpha1.Session
	11, // 16: psdb.v1alpha1.CloseSessionResponse.session:type_name -> psdb.v1alpha1.Session
	17, // 17: psdb.v1alpha1.CloseSessionResponse.error:type_name -> vitess.vtrpc.v16.RPCError
	19, // 18: psdb.v1alpha1.Session.vitess_session:type_name -> vitess.vtgate.v16.Session
	20, // 19: psdb.v1alpha1.ExecuteRequest.BindVariablesEntry.value:type_name -> vitess.query.v16.BindVariable
	20, // 20: psdb.v1alpha1.PrepareRequest.BindVariablesEntry.value:type_name -> vitess.query.v16.BindVariable
	1,  // 21: psdb.v1alpha1.Database.CreateSession:input_type -> psdb.v1alpha1.CreateSessionRequest
	3,  // 22: psdb.v1alpha1.Database.Execute:input_type -> psdb.v1alpha1.ExecuteRequest
	3,  // 23: psdb.v1alpha1.Database.StreamExecute:input_type -> psdb.v1alpha1.ExecuteRequest
	5,  // 24: psdb.v1alpha1.Database.Prepare:input_type -> psdb.v1alpha1.PrepareRequest
	7,  // 25: psdb.v1alpha1.Database.StreamBinlogDumpGTID:input_type -> psdb.v1alpha1.BinlogDumpGTIDRequest
	9,  // 26: psdb.v1alpha1.Database.CloseSession:input_type -> psdb.v1alpha1.CloseSessionRequest
	2,  // 27: psdb.v1alpha1.Database.CreateSession:output_type -> psdb.v1alpha1.CreateSessionResponse
	4,  // 28: psdb.v1alpha1.Database.Execute:output_type -> psdb.v1alpha1.ExecuteResponse
	4,  // 29: psdb.v1alpha1.Database.StreamExecute:output_type -> psdb.v1alpha1.ExecuteResponse
	6,  // 30: psdb.v1alpha1.Database.Prepare:output_type -> psdb.v1alpha1.PrepareResponse
	8,  // 31: psdb.v1alpha1.Database.StreamBinlogDumpGTID:output_type -> psdb.v1alpha1.BinlogDumpGTIDResponse
	10, // 32: psdb.v1alpha1.Database.CloseSession:output_type -> psdb.v1alpha1.CloseSessionResponse
	27, // [27:33] is the sub-list for method output_type
	21, // [21:27] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_psdb_v1alpha1_database_proto_init() }
func file_psdb_v1alpha1_database_proto_init() {
	if File_psdb_v1alpha1_database_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_psdb_v1alpha1_database_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinlogDumpGTIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinlogDumpGTIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psdb_v1alpha1_database_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GTIDSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_psdb_v1alpha1_database_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_psdb_v1alpha1_database_proto_goTypes,
		DependencyIndexes: file_psdb_v1alpha1_database_proto_depIdxs,
		MessageInfos:      file_psdb_v1alpha1_database_proto_msgTypes,
	}.Build()
	File_psdb_v1alpha1_database_proto = out.File
	file_psdb_v1alpha1_database_proto_rawDesc = nil
	file_psdb_v1alpha1_database_proto_goTypes = nil
	file_psdb_v1alpha1_database_proto_depIdxs = nil
}
