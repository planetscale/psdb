// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: psdbconnect/v1/connect.proto

package psdbconnectv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/planetscale/psdb/types/psdbconnect/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ConnectName is the fully-qualified name of the Connect service.
	ConnectName = "psdbconnect.v1.Connect"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectSyncProcedure is the fully-qualified name of the Connect's Sync RPC.
	ConnectSyncProcedure = "/psdbconnect.v1.Connect/Sync"
)

// ConnectClient is a client for the psdbconnect.v1.Connect service.
type ConnectClient interface {
	Sync(context.Context, *connect.Request[v1.SyncRequest]) (*connect.ServerStreamForClient[v1.SyncResponse], error)
}

// NewConnectClient constructs a client for the psdbconnect.v1.Connect service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectClient{
		sync: connect.NewClient[v1.SyncRequest, v1.SyncResponse](
			httpClient,
			baseURL+ConnectSyncProcedure,
			opts...,
		),
	}
}

// connectClient implements ConnectClient.
type connectClient struct {
	sync *connect.Client[v1.SyncRequest, v1.SyncResponse]
}

// Sync calls psdbconnect.v1.Connect.Sync.
func (c *connectClient) Sync(ctx context.Context, req *connect.Request[v1.SyncRequest]) (*connect.ServerStreamForClient[v1.SyncResponse], error) {
	return c.sync.CallServerStream(ctx, req)
}

// ConnectHandler is an implementation of the psdbconnect.v1.Connect service.
type ConnectHandler interface {
	Sync(context.Context, *connect.Request[v1.SyncRequest], *connect.ServerStream[v1.SyncResponse]) error
}

// NewConnectHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectHandler(svc ConnectHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectSyncHandler := connect.NewServerStreamHandler(
		ConnectSyncProcedure,
		svc.Sync,
		opts...,
	)
	return "/psdbconnect.v1.Connect/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectSyncProcedure:
			connectSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectHandler struct{}

func (UnimplementedConnectHandler) Sync(context.Context, *connect.Request[v1.SyncRequest], *connect.ServerStream[v1.SyncResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("psdbconnect.v1.Connect.Sync is not implemented"))
}
